assignment: pin_the_tail
dir: levels/Level0/Module4/src/_99_extra/pin_the_tail
lesson: 99_extra
level: Level0
meta:
  assignment: 99_extra_pin_the_tail
  description: ''
  lesson: 99_extra
  level: Level0
  module: Module4
  oassignment: pin_the_tail
  opath: Level0/Module4/src/_99_extra/pin_the_tail
  title: 99 Extra Pin The Tail
module: Module4
resources: []
text: "\n <div id=\"recipeLeftColumn\">\n  # Pin the Tail on the Donkey\n  <hr/>\n\
  \  <img src=\"./PinTheTail.png\"/>\n  <div id=\"recipeGoal\">\n   ## Goal:\n   The\
  \ player of the game has to click the mouse where the donkey's tail will go. The\
  \ problem is, the picture keeps disappearing!\n  </div>\n </div>\n <div id=\"recipeRightColumn\"\
  >\n  <div id=\"recipeSteps\">\n   ## Steps:\n   This recipe uses two bounding boxes.\
  \ One is in the top left corner of the sketch, the other is a target area where\
  \ the donkey tail should be pinned. In the recipe image, the bounding boxes are\
  \ colored green to help demonstrate the concept, but you won't see them when playing\
  \ the actual game.\n   <ol id=\"stepList\">\n    <li>\n     Find the Pin the Tail\
  \ recipe program in Eclipse.\n    </li>\n    <li>\n     Find a picture of a donkey\
  \ and a separate picture of a tail (tail needs a transparent background).\n    \
  \ <ol class=\"insetRecipeStepsOL\">\n      <li>\n       Save the images to your\
  \ Desktop.\n      </li>\n      <li>\n       Drag and drop each file onto your sketch.\n\
  \      </li>\n     </ol>\n    </li>\n    <li>\n     Load the pictures into variables\
  \ as follows.\n     <ol class=\"insetRecipeStepsOL\">\n      <li>\n       First\
  \ create (declare) variables to hold the images at the top of the sketch.\n    \
  \   ```\n\nPImage donkey;\nPImage tail;\n\n```\n      </li>\n      <li>\n      \
  \ In the setup() method, set the variables to hold the images.\n       ```\n\ndonkey\
  \ = loadImage(\"donkey.jpg\");      //change the file name if you need to\ntail\
  \ = loadImage(\"tail.png\");      //change the file name if you need to\n\n```\n\
  \      </li>\n     </ol>\n    </li>\n    <li>\n     In the setup() method, set your\
  \ canvas size to EXACTLY match the size of the donkey image. You can get the size\
  \ of the image from the file information on the Desktop.\n     ```\n\nsize(width,\
  \ height);     //replace width, height with your picture's dimensions\n\n```\n \
  \   </li>\n    <li>\n     Draw the donkey and tail in the draw() method. The tail\
  \ should move around with the mouse. Try it!\n     ```\n\nbackground (donkey);\n\
  image(tail, mouseX, mouseY);\n\n```\n    </li>\n    <li>\n     If you need to, resize\
  \ the tail to fit onto the donkey. Since this is done ONCE, put this code into the\
  \ setup() method.\n    Note: if you leave height or width as zero, the image will\
  \ scale proportionally.\n     ```\n\ntail.resize(width, height);     //replace width,\
  \ height with your tail's dimensions\n\n```\n    </li>\n    <li>\n     If the top\
  \ of the tail is not in the top left corner of your image, you will have to adjust\
  \ the x and y values so that the top of the tail is drawn where you click the mouse.\
  \ To do this, you would need to adjust the x and y values to make your image work\
  \ as shown below.\n     ```\n\nimage(tail, mouseX-10, mouseY-20);\n\n```\n    </li>\n\
  \    <li>\n     Now we are going to start adding bounding boxes! These should go\
  \ in the draw() method, AFTER the background is drawn!\n     <ol class=\"insetRecipeStepsOL\"\
  >\n      <li>\n       First draw a bounding box (rectangle) in the top left corner\
  \ of the sketch.\n       ```\n\nrect(0, 0, 30, 30);\n\n```\n      </li>\n      <li>\n\
  \       Now we need to draw another bounding box where the tail should go. You can\
  \ use mousePressed to help you figure out the x and y coordinates of the corner\
  \ of this rectangle (see the picture at the top of this page for an idea of what\
  \ this will look like). Example:\n       ```\n\nrect(454, 75, 40, 40);\n\n```\n\
  \      </li>\n     </ol>\n    </li>\n    <li>\n     Now, change your code so the\
  \ donkey is only shown when the mouse is inside the corner bounding box. Hint: use\
  \ the dist() command:\n     ```\n\ndist(0, 0, mouseX, mouseY) &lt; 30\n\n```\n \
  \    When the mouse is outside the corner box, you should show a solid color background.\n\
  \    </li>\n    <li>\n     Now, adjust your code so the tail sticks when you click\
  \ the mouse (this means it will no longer move when the mouse moves). Hint: you\
  \ will need to save the x and y values in variables at the top of your sketch.\n\
  \    </li>\n    <li>\n     When the tail has been pinned, write code to check if\
  \ the tail was pinned inside the target bounding box. You can use dist() like you\
  \ did earlier, or you can write your own code to check it another way. Show the\
  \ donkey so the user knows where they pinned the tail.\n    </li>\n    <li>\n  \
  \   If the tail is in the right place, the player wins and you play a sound. To\
  \ play a sound use the following code\n     ```\n\n    playWhoohoo()\n    \n```\n\
  \    </li>\n    <li>\n     When you have tested that your pogram works, remove the\
  \ line of code that draws the tail target bounding box and see if you can pin the\
  \ tail on the donkey.\n    </li>\n    <li>\n     Make sure you SAVE YOUR CODE when\
  \ you are done.\n    </li>\n    <li>\n     OPTION: Add some text to give the user\
  \ instructions on how to play the game.\n     ```\n\ntextSize(24);\ntext(\"Message\"\
  ,100,20);\n\n```\n    </li>\n   </ol>\n  </div>\n </div>\n\n"

assignment: 01_intro_to_static
dir: levels/Level1/Module3/src/_01_intro_to_static
lesson: 01_intro_to_static
level: Level1
meta:
  assignment: 01_intro_to_static
  description: ''
  lesson: 01_intro_to_static
  level: Level1
  module: Module3
  oassignment: 01_intro_to_static
  opath: Level1/Module3/src/_01_intro_to_static
  title: 01 Intro To Static
module: Module3
resources: []
text: "\n <div id=\"moduleIndex\">\n  # Running Race - Explaining Static\n  The static\
  \ keyword is a reserved word in Java like int, for, if, and else.\n  It can be placed\
  \ before the type when declaring member variables:\n  ```\n\nstatic int var = 1;\n\
  static Robot rob;\n    \n```\n  and before the return type for method definitions:\n\
  \  ```\n\nstatic float calculateArea(float width, float height){ // code }\npublic\
  \ static void main(String[] args){ // code }\n    \n```\n  ### 1. Static Variable\
  \ Lifetime\n  A member variable without static\n  <b>\n   DOES NOT\n  </b>\n  exist\
  \ before an object/instance of a class is made.\n  A member variable with static\n\
  \  <b>\n   DOES\n  </b>\n  exist before an object/instance of a class is made.\n\
  \  Take the Athlete class for example:\n  ```\n\npublic class Athlete {\n  static\
  \ String raceLocation = \"New York\";\n  static String raceStartTime = \"9.00am\"\
  ;\n\n  String name;\n  int speed;\n  int bibNumber;\n  \n  Athlete (String name,\
  \ int speed){\n      this.name = name;\n      this.speed = speed;\n  }\n\n  static\
  \ double calculateDuration(double startSec, double finishSec){ // code }\n\n  void\
  \ run(){ // code }\n}\n    \n```\n  The static member variables in the Athlete class\
  \ can be a accessed and modified without an object/instance of Athlete.\n  This\
  \ does not work for non-static member variables:\n  ```\n\nAthlete.raceLocation\
  \ = \"NYC\";           // OK!\nAthlete.name = \"Jim\";                   // ERROR!\n\
  \nAthlete jim = new Athlete(\"Jim\", 10);   // Athlete object/instance jim\n\njim.raceLocation\
  \ = \"Boston\";            // OK!\njim.name = \"Jimmy\"                      //\
  \ OK!\n    \n```\n  ### 2. Only 1 Static Variable for all Objects of a Class\n \
  \ There is only 1 static member variable for all objects of a class.\n  There are\
  \ unique variables for each object of a class. For example:\n  ```\n\nAthlete jim\
  \ = new Athlete(\"Jim\", 10);\nAthlete amy = new Athlete(\"Amy\", 6);\n\nSystem.out.println(jim.name);\
  \           // prints \"Jim\"\nSystem.out.println(amy.name);           // prints\
  \ \"Amy\"\nSystem.out.println(jim.raceStartTime);  // prints \"9.00am\"\nSystem.out.println(amy.raceStartTime);\
  \  // prints \"9.00am\"\n\n```\n  In this example changing raceStartTime for jim\
  \ to \"10.00am\" also changes the raceStartTime for amy.\n  The raceStartTime variable\
  \ is the same for both jim and amy.\n  ### 3. Non-Static Member Variables and Methods\
  \ can not be put inside Static Methods\n  static methods can also be called before\
  \ an object of a class exists, while non-static methods can't:\n  ```\n\nAthlete.calculateDuration(0.0,\
  \ 14.7);   // OK!\nAthlete.run();                          // ERROR!\nAthlete jim\
  \ = new Athlete(\"Jim\", 10);\njim.run();                              // OK!\n\
  jim.calculateDuration(0.0, 14.7);       // OK!\n    \n```\n  This is why non-static\
  \ member variables and methods can't be placed inside of static methods.\n  Static\
  \ methods can be called before an object is created when non-static member variables\
  \ haven't been created yet!\n  ```\n\nstatic double calculateDuration(double startSec,\
  \ double finishSec){\n    double durationSec = finishSec - startSec;\n    \n   \
  \ System.out.println(name + \" ran the race in \" + durationSec + \" seconds.\"\
  ); // ERROR! name is non-static\n    return durationSec;\n}\n\n```\n  The\n  <b>\n\
  \   this\n  </b>\n  keyword refers to an object so it can't be put inside of a static\
  \ method either:\n  ```\n\npublic static void main(String[] args){\n    JFrame frame\
  \ = new JFrame();\n    frame.addActionListener(this);      // ERROR!\n}\n\n```\n\
  \ </div>\n\n"
